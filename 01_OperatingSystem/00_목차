
📚 목차 (Table of Contents)
🔹 1. 운영체제란?
🔹 2. 운영체제의 4대 관리 기능
🔹 3. 운영체제의 핵심 구성 요소

커널(Kernel)

시스템 콜(System Call)

드라이버(Driver)

유저 인터페이스(User Interface)

🔹 4. 프로세스와 메모리 관리

프로세스 & 스레드

CPU 스케줄링

프로세스 동기화 & 교착상태

메모리 관리

🔹 5. 파일 시스템 & 입출력 시스템

파일 시스템

입출력 시스템

🔹 6. 운영체제 확장 주제

컨텍스트 스위칭 최적화

실시간 스케줄링

멀티프로세서 스케줄링

동기화 및 병행성

가상화

보안 & 접근 제어

분산 운영체제

실시간 운영체제

시스템 콜 & 인터페이스 심화

🧩 1. 운영체제란?

컴퓨터 하드웨어와 사용자 사이를 중재하는 소프트웨어

모든 프로그램은 반드시 OS 위에서 실행된다.

프로그램과 하드웨어를 유기적으로 이어주는 핵심 역할 수행

⚙️ 2. 운영체제의 4대 관리 기능
기능	설명
CPU 관리	프로그램 실행 순서 관리
메모리 관리	프로그램이 사용할 메모리 공간 배분
Storage 관리	데이터 저장 및 접근 권한 관리
I/O 디바이스 관리	장치 입출력 제어 및 버퍼 관리
🧱 3. 운영체제의 핵심 구성 요소
커널(Kernel)

운영체제의 핵심 부분 (OS의 심장)

하드웨어 접근, 자원 분배, 프로세스 제어 담당

모듈 형태로 구조화되어 있음

📦 커널 유형

모놀리식 커널 (Monolithic)

마이크로커널 (Microkernel)

하이브리드 커널 (Hybrid)

시스템 콜(System Call)

응용프로그램이 커널 기능을 요청하는 인터페이스

“프로그램 → 시스템콜 → 커널” 흐름으로 실행됨

예시:
printf("Hello"); → 내부적으로 write() 시스템콜 호출

드라이버(Driver)

하드웨어와 커널 사이에서 장치를 제어하는 모듈

예: 그래픽카드, 프린터, 사운드카드 등

유저 인터페이스(User Interface)

CLI(Command Line Interface), GUI(Graphical User Interface)

사용자가 OS와 상호작용하는 수단

🧮 4. 프로세스와 메모리 관리
프로세스 & 스레드
구분	설명
프로그램	실행되지 않은 코드 덩어리
프로세스	실행 중인 프로그램 (Code, Data, Heap, Stack)
스레드	프로세스 내에서 실행되는 흐름 단위
CPU 스케줄링

여러 프로세스가 CPU를 공유할 때 실행 순서를 결정

다양한 알고리즘으로 효율 조정

알고리즘	설명
FCFS	먼저 온 순서대로 실행
SJF	실행 시간이 짧은 순서대로
RR	일정 시간 단위로 번갈아 실행
Priority	우선순위 높은 프로세스 먼저 실행
프로세스 동기화 & 교착상태

자원을 공유할 때 동시 접근 문제(concurrency) 해결

대표 도구: 세마포어(Semaphore), 뮤텍스(Mutex), 모니터(Monitor)

🧩 교착상태 4조건

상호배제 (Mutual Exclusion)

점유와 대기 (Hold and Wait)

비선점 (No Preemption)

환형대기 (Circular Wait)

메모리 관리

프로세스 실행 시 메모리 배분 방식

개념	설명
페이징(Paging)	메모리를 고정 크기 블록으로 나누어 관리
가상 메모리(Virtual Memory)	실제 물리 메모리보다 큰 공간처럼 사용
페이지 교체 알고리즘	FIFO, LRU, Optimal 등
💾 5. 파일 시스템 & 입출력 시스템
파일 시스템
항목	설명
파일(File)	데이터를 저장하는 논리 단위
디렉터리 구조	계층적 트리 형태로 파일 관리
i-node	파일 메타데이터(크기, 위치, 권한 등) 저장
파일 접근 방법	순차 접근 / 직접 접근 / 인덱스 접근
입출력 시스템
항목	설명
I/O 버퍼링	입출력 속도 차이 완화
인터럽트(Interrupt)	I/O 완료 시 CPU에 알림
DMA (Direct Memory Access)	CPU를 거치지 않고 메모리 ↔ 장치 직접 통신
비동기 I/O	CPU가 기다리지 않고 다음 작업 수행 가능
🧠 6. 운영체제 확장 주제
컨텍스트 스위칭 최적화

CPU가 프로세스 전환 시 저장/복원 오버헤드를 최소화

실시간 스케줄링

시간 제약이 있는 작업을 보장하는 스케줄링 (Rate Monotonic, EDF 등)

멀티프로세서 스케줄링

멀티코어 CPU 환경에서 부하를 균형 있게 분배

동기화 및 병행성

여러 프로세스/스레드가 동시에 실행될 때 데이터 일관성을 유지

병행성(Concurrency) vs 병렬성(Parallelism)

가상화

물리 자원을 논리적으로 분리해 여러 환경에서 독립 실행

예: 하이퍼바이저, Docker, VM

보안 & 접근 제어

권한 관리, 암호화, 샌드박스 환경

사용자/그룹별 접근 제어, UID/GID 기반 권한 관리

분산 운영체제

여러 컴퓨터가 하나의 OS처럼 동작 (ex. Kubernetes, Hadoop, GFS)

실시간 운영체제

일정 시간 내 응답을 보장하는 RTOS (QNX, VxWorks, ROS)

시스템 콜 & 인터페이스 심화

사용자 모드 ↔ 커널 모드 전환

POSIX API, IPC(파이프, 메시지큐, 공유메모리)
